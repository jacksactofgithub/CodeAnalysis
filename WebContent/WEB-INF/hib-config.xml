<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
http://www.springframework.org/schema/aop 
http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
  http://www.springframework.org/schema/context   
   http://www.springframework.org/schema/context/spring-context-2.5.xsd
">
	<context:component-scan  base-package="pkg"/>   
	<!-- 支持aop注解 -->
	<aop:aspectj-autoproxy />
	
	<bean id="dataSource"  
            class="com.mchange.v2.c3p0.ComboPooledDataSource">  
            <property name="driverClass"  
                value="com.mysql.jdbc.Driver">  
            </property>  
  		   <property name="jdbcUrl" value="jdbc:mysql://127.0.0.1:3306/CodeAnalysis?useUnicode=true&amp;characterEncoding=UTF-8"></property> 
      <!-- 数据库url --> 
             <property name="user" value="root"></property>  
            <property name="password" value=""></property>
			  <!--连接池中保留的最小连接数。-->  
			  <property name="minPoolSize" value="5"/>  
			  <!--连接池中保留的最大连接数。Default: 15 -->  
			  <property name="maxPoolSize" value="200"/>  
			  <!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->  
			  <property name="initialPoolSize" value="5"/>  
			  <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->  
			  <property name="maxIdleTime" value="60"/>  
			  <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->  
			  <property name="acquireIncrement" value="5"/>  
			  <!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements  
			 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。  
			 如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->  
			  <property name="maxStatements" value="0"/>  
			  <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->  
			  <property name="idleConnectionTestPeriod" value="30"/>  
			  <!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->  
			  <property name="acquireRetryAttempts" value="30"/>  
			  <!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效  
			 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试  
			 获取连接失败后该数据源将申明已断开并永久关闭。Default: false-->  
			  <property name="breakAfterAcquireFailure" value="false"/>  
			  <!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的  
			时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable  
			等方法来提升连接测试的性能。Default: false -->  
			  <property name="testConnectionOnCheckout" value="false"/>  
    </bean>

   <bean id="sessionFactory"  
       class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">  
           <property name="dataSource">  
               <ref bean="dataSource" />  
           </property>
           <property name="hibernateProperties">  
               <props>  
               	<!-- key的名字前面都要加hibernate. -->
                   <prop key="hibernate.dialect">  
                       org.hibernate.dialect.MySQLDialect  
                   </prop>  
                   <prop key="hibernate.show_sql">false</prop>
                   <prop key="hibernate.hbm2ddl.auto">update</prop>
               </props>
           </property>
           
           <property name="packagesToScan" value="pkg"></property>
		
   </bean>  
<!-- <bean id="init" class="cn.ztweb.manager.impl.InitDataService"></bean> -->
<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate" >
	<property name="sessionFactory" ref="sessionFactory"></property>
</bean>

<!--配置一个JdbcTemplate实例-->  
<bean id="jdbcTemplate"  class="org.springframework.jdbc.core.JdbcTemplate">   
     <property name="dataSource" ref="dataSource"/>   
</bean> 
     
<!-- 配置事务管理 -->
<bean id="txManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager" >
	<property name="sessionFactory" ref="sessionFactory"></property>
</bean>
<tx:annotation-driven transaction-manager="txManager" />
<aop:config> 
	<aop:pointcut expression="execution(public * pkg.*.*(..))" id="businessService"/> 
	<!-- 切面的切点未更改 -->
	<aop:advisor advice-ref="txAdvice" pointcut-ref="businessService" /> 
</aop:config> 
<tx:advice id="txAdvice" transaction-manager="txManager" > 
	<tx:attributes> 
		<tx:method name="find*"  read-only="true" propagation="NOT_SUPPORTED"  /> 
		<!-- find开头的方法不需要在事务中运行 。 
		有些情况是没有必要使用事务的，比如获取数据。开启事务本身对性能是有一定的影响的--> 
		<tx:method name="*"/>    <!-- 其他方法在事务中运行 --> 
	</tx:attributes> 
</tx:advice> 

</beans>
